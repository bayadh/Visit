{"remainingRequest":"/Users/bayadhouib/Downloads/vue-app-master-3/node_modules/babel-loader/lib/index.js!/Users/bayadhouib/Downloads/vue-app-master-3/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/bayadhouib/Downloads/vue-app-master-3/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/bayadhouib/Downloads/vue-app-master-3/src/components/Child.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/bayadhouib/Downloads/vue-app-master-3/src/components/Child.vue","mtime":1547911227865},{"path":"/Users/bayadhouib/Downloads/vue-app-master-3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/bayadhouib/Downloads/vue-app-master-3/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/bayadhouib/Downloads/vue-app-master-3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/bayadhouib/Downloads/vue-app-master-3/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'child',\n  data: function data() {\n    return {\n      // default to Montreal to keep it simple\n      // change this to whatever makes sense\n      center: {\n        lat: 36.169750,\n        lng: 8.704470\n      },\n      markers: [],\n      places: [],\n      currentPlace: null\n    };\n  },\n  mounted: function mounted() {\n    this.geolocate();\n  },\n  methods: {\n    // receives a place object via the autocomplete component\n    setPlace: function setPlace(place) {\n      this.currentPlace = place;\n    },\n    addMarker: function addMarker() {\n      if (this.currentPlace) {\n        var marker = {\n          lat: this.currentPlace.geometry.location.lat(),\n          lng: this.currentPlace.geometry.location.lng()\n        };\n        this.markers.push({\n          position: marker\n        });\n        this.places.push(this.currentPlace);\n        this.center = marker;\n        this.currentPlace = null;\n      }\n    },\n    geolocate: function geolocate() {\n      var _this = this;\n\n      navigator.geolocation.getCurrentPosition(function (position) {\n        _this.center = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n      });\n    }\n  }\n};",{"version":3,"sources":["Child.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,eAAA;AACA,EAAA,IAAA,EAAA,OADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA;AACA;AACA,MAAA,MAAA,EAAA;AAAA,QAAA,GAAA,EAAA,SAAA;AAAA,QAAA,GAAA,EAAA;AAAA,OAHA;AAIA,MAAA,OAAA,EAAA,EAJA;AAKA,MAAA,MAAA,EAAA,EALA;AAMA,MAAA,YAAA,EAAA;AANA,KAAA;AAQA,GAXA;AAaA,EAAA,OAbA,qBAaA;AACA,SAAA,SAAA;AACA,GAfA;AAiBA,EAAA,OAAA,EAAA;AACA;AACA,IAAA,QAFA,oBAEA,KAFA,EAEA;AACA,WAAA,YAAA,GAAA,KAAA;AACA,KAJA;AAKA,IAAA,SALA,uBAKA;AACA,UAAA,KAAA,YAAA,EAAA;AACA,YAAA,MAAA,GAAA;AACA,UAAA,GAAA,EAAA,KAAA,YAAA,CAAA,QAAA,CAAA,QAAA,CAAA,GAAA,EADA;AAEA,UAAA,GAAA,EAAA,KAAA,YAAA,CAAA,QAAA,CAAA,QAAA,CAAA,GAAA;AAFA,SAAA;AAIA,aAAA,OAAA,CAAA,IAAA,CAAA;AAAA,UAAA,QAAA,EAAA;AAAA,SAAA;AACA,aAAA,MAAA,CAAA,IAAA,CAAA,KAAA,YAAA;AACA,aAAA,MAAA,GAAA,MAAA;AACA,aAAA,YAAA,GAAA,IAAA;AACA;AACA,KAhBA;AAiBA,IAAA,SAAA,EAAA,qBAAA;AAAA;;AACA,MAAA,SAAA,CAAA,WAAA,CAAA,kBAAA,CAAA,UAAA,QAAA,EAAA;AACA,QAAA,KAAA,CAAA,MAAA,GAAA;AACA,UAAA,GAAA,EAAA,QAAA,CAAA,MAAA,CAAA,QADA;AAEA,UAAA,GAAA,EAAA,QAAA,CAAA,MAAA,CAAA;AAFA,SAAA;AAIA,OALA;AAMA;AAxBA;AAjBA,CAAA","sourcesContent":["<template>\n  <div>\n\n  \n <label>\n        <gmap-autocomplete\n          @place_changed=\"setPlace\">\n        </gmap-autocomplete>\n        <button @click=\"addMarker\">Add</button>\n      </label>\n      <gmap-map\n      :center=\"center\"\n      :zoom=\"12\"\n      style=\"width:100%;  height: 400px;\"\n    >\n      <gmap-marker\n        :key=\"index\"\n        v-for=\"(m, index) in markers\"\n        :position=\"m.position\"\n        @click=\"center=m.position\"\n      ></gmap-marker>\n    </gmap-map>\n\n\n\n\n\n  \n</div>\n</template>\n\n<script>\n  export default {\n      name: 'child',\n  data() {\n    return {\n      // default to Montreal to keep it simple\n      // change this to whatever makes sense\n      center: { lat: 36.169750, lng: 8.704470 },\n      markers: [],\n      places: [],\n      currentPlace: null\n    };\n  },\n\n  mounted() {\n    this.geolocate();\n  },\n\n  methods: {\n    // receives a place object via the autocomplete component\n    setPlace(place) {\n      this.currentPlace = place;\n    },\n    addMarker() {\n      if (this.currentPlace) {\n        const marker = {\n          lat: this.currentPlace.geometry.location.lat(),\n          lng: this.currentPlace.geometry.location.lng()\n        };\n        this.markers.push({ position: marker });\n        this.places.push(this.currentPlace);\n        this.center = marker;\n        this.currentPlace = null;\n      }\n    },\n    geolocate: function() {\n      navigator.geolocation.getCurrentPosition(position => {\n        this.center = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n      });\n    }\n  }\n\n     \n  }\n</script>\n<style>\n  </style>\n"],"sourceRoot":"src/components"}]}